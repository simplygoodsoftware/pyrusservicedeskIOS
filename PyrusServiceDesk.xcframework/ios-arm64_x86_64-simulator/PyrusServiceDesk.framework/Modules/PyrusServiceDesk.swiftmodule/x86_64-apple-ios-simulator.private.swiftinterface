// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PyrusServiceDesk
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AVKit
import Compression
import DeveloperToolsSupport
import Foundation
import ImageIO
import MobileCoreServices
import Photos
@_exported import PyrusServiceDesk
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@objc public class PSDUserInfo : ObjectiveC.NSObject {
  public init(appId: Swift.String, clientName: Swift.String, userId: Swift.String, userName: Swift.String, secretKey: Swift.String?)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class ServiceDeskConfiguration : ObjectiveC.NSObject {
  public var welcomeMessage: Swift.String? {
    get
  }
  @_inheritsConvenienceInitializers @objc(ServiceDeskConfigurationBuilder) public class Builder : ObjectiveC.NSObject {
    @discardableResult
    @objc public func setChatTitle(_ chatTitle: Swift.String?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setThemeColor(_ themeColor: UIKit.UIColor?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setWelcomeMessage(_ welcomeMessage: Swift.String?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setAvatarForSupport(_ avatarForSupport: UIKit.UIImage?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setLocale(_ locale: Swift.String?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setUserName(_ userName: Swift.String?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setChatTitleView(_ chatTitleView: UIKit.UIView?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setCustomRightBarButtonItem(_ customRightBarButtonItem: UIKit.UIBarButtonItem?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setCustomLeftBarButtonItem(_ customLeftBarButtonItem: UIKit.UIBarButtonItem?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setChatsLeftBarButtonItem(_ customLeftBarButtonItem: UIKit.UIBarButtonItem?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setChatsRightBarButtonItem(_ customRightBarButtonItem: UIKit.UIView?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setTitleHandler(_ titleHandler: (() -> Swift.Void)?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setInfoView(_ infoView: PyrusServiceDesk.PSDInfoView?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc(setStatusBarStyle:darkBarStyle:) public func setStatusBarStyle(_ barStyle: UIKit.UIStatusBarStyle, _ darkBarStyle: UIKit.UIStatusBarStyle) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc(setKeyboardAppearance:darkKeyboardAppearance:) public func setKeyboardAppearance(_ keyboardAppearance: UIKit.UIKeyboardAppearance, _ darkKeyboardAppearance: UIKit.UIKeyboardAppearance) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setKeyboardColor(_ color: UIKit.UIColor) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setFontName(_ fontName: Swift.String?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setUserTextColor(_ color: UIKit.UIColor?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setUserMessageBackgroundColor(_ color: UIKit.UIColor?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setSupportTextColor(_ color: UIKit.UIColor?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setSupportMessageBackgroundColor(_ color: UIKit.UIColor?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setChatTitleColor(_ color: UIKit.UIColor?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc(setToolbarStyle:darkBarStyle:) public func setToolbarStyle(_ barStyle: UIKit.UIBarStyle, _ darkBarStyle: UIKit.UIBarStyle) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setToolbarColor(_ color: UIKit.UIColor?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setToolbarButtonColor(_ color: UIKit.UIColor?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setBackgroundColor(_ color: UIKit.UIColor?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setAttachmentMenuTextColor(_ color: UIKit.UIColor?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setAttachmentMenuButtonColor(_ color: UIKit.UIColor?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @discardableResult
    @objc public func setSendButtonColor(_ color: UIKit.UIColor?) -> PyrusServiceDesk.ServiceDeskConfiguration.Builder
    @objc public func build() -> PyrusServiceDesk.ServiceDeskConfiguration
    @objc override dynamic public init()
    @objc deinit
  }
  @objc deinit
}
public enum HorizontalAlignment {
  case left
  case right
  case leading
  case trailing
  case justified
  public static func == (a: PyrusServiceDesk.HorizontalAlignment, b: PyrusServiceDesk.HorizontalAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum VerticalAlignment {
  case top
  case center
  case bottom
  public static func == (a: PyrusServiceDesk.VerticalAlignment, b: PyrusServiceDesk.VerticalAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public protocol OnStopCallback {
  @objc func onStop()
}
@objc public protocol DeniedAccessCallBack {
  @objc func deleteUsers(userIds: [Swift.String])
}
@objc extension UIKit.UIColor {
  @objc convenience dynamic public init?(hex: Swift.String?)
}
@objc public protocol FileChooser {
  @objc var label: Swift.String { get set }
  @objc weak var chooserDelegate: (any PyrusServiceDesk.FileChooserDelegate)? { get set }
}
@objc public protocol FileChooserDelegate {
  @objc func didEndWithSuccess(_ data: Foundation.Data?, url: Foundation.URL?)
  @objc func didEndWithCancel()
}
@objc public protocol NewReplySubscriber {
  @objc func onNewReply(hasUnreadComments: Swift.Bool, lastCommentText: Swift.String?, lastCommentAttachmentsCount: Swift.Int, lastCommentAttachments: [Swift.String]?, utcTime: Swift.Double)
}
@objc public protocol LogEvents {
  @objc func logPyrusServiceDesk(event: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class PSDInfoView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func removeFromSuperview()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PyrusServiceDesk : ObjectiveC.NSObject {
  public static var PSD_CLOSED_NOTIFICATION_NAME: Swift.String
  public static var trustedUrls: [Swift.String]?
  public static var multichats: Swift.Bool
  public static func addUser(appId: Swift.String, clientName: Swift.String, userId: Swift.String, userName: Swift.String, secretKey: Swift.String? = nil)
  @objc public static func setPushToken(_ token: Swift.String?, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc public static func start(on viewController: UIKit.UIViewController, onStopCallback: (any PyrusServiceDesk.OnStopCallback)? = nil)
  @objc public static func start(on viewController: UIKit.UIViewController, configuration: PyrusServiceDesk.ServiceDeskConfiguration?, onStopCallback: (any PyrusServiceDesk.OnStopCallback)? = nil, deniedAccessCallback: (any PyrusServiceDesk.DeniedAccessCallBack)? = nil)
  @objc public static func start(on viewController: UIKit.UIViewController, configuration: PyrusServiceDesk.ServiceDeskConfiguration?, completion: (() -> Swift.Void)? = nil, onStopCallback: (any PyrusServiceDesk.OnStopCallback)? = nil)
  @objc public static func start(with configuration: PyrusServiceDesk.ServiceDeskConfiguration?, onStopCallback: (any PyrusServiceDesk.OnStopCallback)? = nil) -> UIKit.UINavigationController?
  @objc public static func stop()
  @objc public static var onAuthorizationFailed: (() -> Swift.Void)?
  @objc public static func subscribeToReplies(_ subscriber: (any PyrusServiceDesk.NewReplySubscriber)?)
  @objc public static func unsubscribeFromReplies(_ subscriber: (any PyrusServiceDesk.NewReplySubscriber)?)
  @objc public static func subscribeToGogEvents(_ subscriber: any PyrusServiceDesk.LogEvents)
  @objc public static func createWith(_ clientId: Swift.String?, clientName: Swift.String? = nil, multichats: Swift.Bool = false, authorId: Swift.String? = nil, userName: Swift.String? = nil, additionalUsers: [PyrusServiceDesk.PSDUserInfo] = [], domain: Swift.String? = nil, loggingEnabled: Swift.Bool = false, authorizationToken: Swift.String? = nil)
  @objc public static func setFieldsData(fieldsData: [Swift.String : Swift.String]? = nil)
  @objc public static func createWith(_ clientId: Swift.String?, reset: Swift.Bool, domain: Swift.String? = nil, loggingEnabled: Swift.Bool = false, authorizationToken: Swift.String? = nil)
  @objc public static func createWith(_ clientId: Swift.String?, clientName: Swift.String? = nil, userId: Swift.String?, securityKey: Swift.String? = nil, userName: Swift.String? = nil, multichats: Swift.Bool = false, authorId: Swift.String? = nil, additionalUsers: [PyrusServiceDesk.PSDUserInfo] = [], domain: Swift.String? = nil, loggingEnabled: Swift.Bool = false, authorizationToken: Swift.String? = nil)
  @objc public static func refresh(onError: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public static func refreshFromPush(messageId: Swift.Int)
  @objc public static func present(_ viewController: UIKit.UIViewController, animated: Swift.Bool, completion: (() -> Swift.Void)?)
  @objc public static func registerFileChooser(_ chooser: (any UIKit.UIViewController & PyrusServiceDesk.FileChooser)?)
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.NSAttributedString {
  public func lastCharacterMaxX(_ w: CoreFoundation.CGFloat) -> (maxX: CoreFoundation.CGFloat, numberOfLines: Swift.Int)
}
extension PyrusServiceDesk.PyrusServiceDesk {
  @objc public static func apiSign() -> Swift.String
}
extension PyrusServiceDesk.HorizontalAlignment : Swift.Equatable {}
extension PyrusServiceDesk.HorizontalAlignment : Swift.Hashable {}
extension PyrusServiceDesk.VerticalAlignment : Swift.Equatable {}
extension PyrusServiceDesk.VerticalAlignment : Swift.Hashable {}
